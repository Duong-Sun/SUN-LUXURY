

=== GPT_OpenAI_Integration.gs ===


function callGPT(prompt) {
  const API_KEY = "<<YOUR_OPENAI_API_KEY>>";
  const url = "https://api.openai.com/v1/chat/completions";
  const payload = {
    model: "gpt-4",
    messages: [
      {"role": "system", "content": "You are an AI assistant."},
      {"role": "user", "content": prompt}
    ]
  };
  const options = {
    method: "post",
    contentType: "application/json",
    headers: {
      Authorization: "Bearer " + API_KEY
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };
  const response = UrlFetchApp.fetch(url, options);
  const json = JSON.parse(response.getContentText());
  return json.choices && json.choices.length > 0 ? json.choices[0].message.content : "No response.";
}


=== QC5_DeploymentGuide.txt ===


# üìò T√ÄI LI·ªÜU TRI·ªÇN KHAI H·ªÜ TH·ªêNG QC5.0 V2 ‚Äì SUN PRINCE GROUP

## ‚úÖ M·ª§C TI√äU
T·ª± ƒë·ªông ho√° to√†n b·ªô h·ªá th·ªëng qu·∫£n l√Ω d·ªØ li·ªáu tr√™n n·ªÅn Google (Forms, Sheets, Drive) v·ªõi:
- Qu·∫£n tr·ªã 13 ch·ª©c nƒÉng
- G·∫Øn k·∫øt QR, nh·∫≠p li·ªáu, sinh m√£, b√°o c√°o
- Qu·∫£n l√Ω ID, li√™n k·∫øt n·ªôi b·ªô
- ƒêi·ªÅu ph·ªëi dashboard trung t√¢m
- Backup ƒë·ªãnh k·ª≥

---

## ‚úÖ DANH S√ÅCH T√ÄI LI·ªÜU & T√äN FILE

### üîß C·∫•u tr√∫c file chu·∫©n m·ªói module:
1. `XX.<CHUC_NANG>.FORM` ‚Äì Google Form nh·∫≠p li·ªáu
2. `XX.<CHUC_NANG>.DATA` ‚Äì Sheet nh·∫≠n d·ªØ li·ªáu
3. `XX.<CHUC_NANG>.QLGSHEET` ‚Äì Sheet x·ª≠ l√Ω, t·ªïng h·ª£p, b√°o c√°o

### üß± Danh s√°ch n·ªÅn t·∫£ng:
- `00_DataLookup.TONG.gsheet`
- `00_CaiDatTrungTam.TONG.gsheet`
- `00_QUANLY_FILE.gsheet`
- `00_REPORT_TONG.gsheet`
- `00_AI_CommandLog.gsheet`
- `00_BACKUP_SNAPSHOT_ARCHIVE.folder`

---

## üßô‚Äç‚ôÇÔ∏è MODULE SCRIPT
| T·ªáp | Ch·ª©c nƒÉng |
|-----|-----------|
| `00_CaiDatTrungTam.gs` | L·∫•y c·∫•u h√¨nh |
| `01_DataLookup.gs` | L·∫•y danh m·ª•c chu·∫©n |
| `02_AutoImportRange.gs` | L·∫•y d·ªØ li·ªáu t·ª´ nhi·ªÅu file |
| `03_ProtectCaiDatNguon.gs` | ·∫®n + kh√≥a sheet config |
| `04_LogCommandAI.gs` | Log l·ªánh GPT |
| `05_QRFormGenerator.gs` | Sinh QR t·ª´ link form |
| `06_AutoBackupSnapshot.gs` | T·ª± sao l∆∞u file |
| `07_AutoGenerateMaID.gs` | T·ª± sinh ID theo chu·∫©n |
| `08_AutoCreateDriveFolders.gs` | T·∫°o th∆∞ m·ª•c h·ªá th·ªëng |
| `09_WriteSelfIDHyperlink.gs` | T·ª± g·∫Øn ID v√† link v√†o ch√≠nh m√¨nh |

---

## üìã CHECKLIST TRI·ªÇN KHAI

### ‚è± Tr∆∞·ªõc khi tri·ªÉn khai:
- [ ] T·∫°o Google Drive `SUN.PRINCE.GROUP`
- [ ] T·∫°o subfolder: `SUN.LUXURY > GOOGLE.SHEETS | DOCS | FORMS | BACKUP`
- [ ] M·ªü `00_DataLookup.TONG` v√† nh·∫≠p danh m·ª•c
- [ ] M·ªü `00_CaiDatTrungTam.TONG` v√† c·∫•u h√¨nh ID

### üîÅ ƒê·ªëi v·ªõi m·ªói module:
- [ ] T·∫°o file `.FORM`, `.DATA`, `.QLGSHEET`
- [ ] Nh√∫ng script t∆∞∆°ng ·ª©ng t·ª´ ZIP
- [ ] D√°n `FILE_ID` t·ª´ `.DATA` v√†o `.QLGSHEET`
- [ ] G·∫Øn `IMPORTRANGE` t·ª´ `.DATA` sang `.QLGSHEET`
- [ ] G·∫Øn `IMPORTRANGE` t·ª´ `.QLGSHEET` sang `00_REPORT_TONG`

### üß† T√≠ch h·ª£p AI Log (tu·ª≥ ch·ªçn):
- [ ] G·ªçi `logAICall` m·ªói khi g·ª≠i prompt GPT
- [ ] Ghi v√†o `00_AI_CommandLog`

---

## üîÑ S∆† ƒê·ªí LU·ªíNG D·ªÆ LI·ªÜU (D·∫†NG VƒÇN B·∫¢N)

```
Ng∆∞·ªùi d√πng ‚Üí (Scan QR) ‚Üí Google Form ‚Üí .FORM
        ‚Üí Sheet g·ªëc (.DATA) "Form Responses"
        ‚Üí Nh·∫≠p li·ªáu chu·∫©n h√≥a, sinh ID
        ‚Üí G·ª≠i v·ªÅ file ch·ª©c nƒÉng (.QLGSHEET)
        ‚Üí G·∫Øn hyperlink chi ti·∫øt, log
        ‚Üí B√°o c√°o qua `00_REPORT_TONG` ‚Üí Dashboard LookerStudio

(‚Üì)
     ‚Ü≥ To√†n b·ªô ID, link file, metadata ghi t·∫°i `00_QUANLY_FILE`
     ‚Ü≥ L·ªãch s·ª≠ l·ªánh GPT ghi t·∫°i `00_AI_CommandLog`
     ‚Ü≥ M·ªói ng√†y snapshot file l∆∞u t·∫°i `00_BACKUP_SNAPSHOT_ARCHIVE`
```

---

## üèÅ T·ªêI ∆ØU H√ìA
- H·ªá th·ªëng kh√¥ng ph·ª• thu·ªôc th∆∞ m·ª•c
- M·ªói file t·ª± ghi ID + link
- Kh√¥ng d√πng Apps Script ph·ª©c t·∫°p ·ªü Form
- T√°ch bi·ªát d·ªØ li·ªáu ‚Äì x·ª≠ l√Ω ‚Äì b√°o c√°o
- Cho ph√©p d·ªÖ d√†ng sao ch√©p, nh√¢n b·∫£n

---

## üìå K·∫æT LU·∫¨N
S·∫µn s√†ng deploy h·ªá th·ªëng cho to√†n b·ªô doanh nghi·ªáp. C√≥ th·ªÉ g·∫Øn GPT, chatbot, CRM b·∫•t c·ª© l√∫c n√†o.



=== 01_DataLookup.gs ===


function getDanhMucLookup(sheetName) {
  const sheet = SpreadsheetApp.openById('<<DATA_LOOKUP_FILE_ID>>').getSheetByName(sheetName);
  return sheet.getDataRange().getValues();
}


=== ChatbotSheetHandler.gs ===


function respondToChatInSheet(sheetName, userPrompt) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const response = callGPT(userPrompt);
  const row = sheet.getLastRow() + 1;
  sheet.getRange(row, 1).setValue(new Date());
  sheet.getRange(row, 2).setValue(userPrompt);
  sheet.getRange(row, 3).setValue(response);
  return response;
}


=== 05_QRFormGenerator.gs ===


function generateQRCode(link) {
  return "https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=" + encodeURIComponent(link);
}


=== SuperAIOrchestrator.gs ===


function handleAIPrompt(prompt, metadata) {
  const routeSheet = SpreadsheetApp.openById("<<ROUTER_SHEET>>").getSheetByName("Routing");
  const rules = routeSheet.getDataRange().getValues();
  for (let i = 1; i < rules.length; i++) {
    if (prompt.includes(rules[i][0])) {
      const dest = rules[i][1];
      SpreadsheetApp.openById("<<AI_LOG>>").getSheetByName("Log")
        .appendRow([new Date(), metadata.user, prompt, dest, "ROUTED"]);
      return dest;
    }
  }
  return "DEFAULT_ROUTING";
}


=== GPT_ChartEngine.gs ===


function generateChartFromData(sheetName) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const range = sheet.getDataRange();
  const chart = sheet.newChart()
    .setChartType(Charts.ChartType.COLUMN)
    .addRange(range)
    .setPosition(5, 5, 0, 0)
    .build();
  sheet.insertChart(chart);
}


=== 04_LogCommandAI.gs ===


function logAICall(command, user, result, status) {
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("AI_LOG");
  logSheet.appendRow([new Date(), user, command, result, status]);
}


=== QC5_ULTIMATE_MASTER_GUIDE.txt ===


# üèÜ ULTIMATE QC5.X GRAND MASTER SYSTEM ‚Äî T·∫¨P ƒêO√ÄN AI TO√ÄN C·∫¶U

---

## üöÄ M·ª§C TI√äU
X√¢y d·ª±ng h·ªá th·ªëng qu·∫£n tr·ªã d·ªØ li·ªáu t·ªëi th∆∞·ª£ng cho T·∫≠p ƒëo√†n ƒëa ng√†nh ngh·ªÅ v·ªõi:
- H√†ng trƒÉm c√¥ng ty con
- T·ª± ƒë·ªông t·∫°o file, sinh m√£, ph√¢n quy·ªÅn
- Giao di·ªán th√¥ng minh, QR, nh·∫≠p li·ªáu nhanh
- Ghi log l·ªánh AI, theo d√µi KPI, b√°o c√°o LookerStudio

---

## üß± C·∫§U TR√öC TO√ÄN H·ªÜ TH·ªêNG

### üè¢ T·∫ßng 0 ‚Äì T·∫≠p ƒëo√†n
- `00_QuanLy.HeThong.TapDoan.gsheet` ‚Äî log to√†n h·ªá th·ªëng
- `00_Report.TapDoan.Dashboard.gsheet` ‚Äî dashboard t·ªïng
- `00_AILog.Router.gsheet` ‚Äî ƒë·ªãnh tuy·∫øn l·ªánh AI
- `createNewCompanyInstance(companyCode)` ‚Äî t·∫°o DN m·ªõi
- `routeAIPromptToCompany(prompt, email)` ‚Äî g·ª≠i l·ªánh t·ªõi DN
- `updateDashboardTapDoan()` ‚Äî t·ªïng h·ª£p d·ªØ li·ªáu DN

---

### üè≠ T·∫ßng 1 ‚Äì Doanh nghi·ªáp
M·ªói doanh nghi·ªáp c√≥:
- `13 x .QLGSHEET` ‚Äì x·ª≠ l√Ω
- `13 x .DATA` ‚Äì l∆∞u g·ªëc
- `13 x .FORM` ‚Äì nh·∫≠p li·ªáu
- `Lookup`, `CaiDat`, `Dashboard`, `AI Log`, `Backup`

T·ª± ƒë·ªông:
- Ghi ID
- Ghi link
- Backup
- Ghi Log AI
- Ph√¢n quy·ªÅn
- Pivot + Bi·ªÉu ƒë·ªì

---

## üîß TO√ÄN B·ªò SCRIPT ƒê√É C√ì

### C·∫§P DOANH NGHI·ªÜP
- `AutoGenerateMaID.gs`
- `WriteSelfIDHyperlink.gs`
- `AutoImportRange.gs`
- `ProtectCaiDatNguon.gs`
- `AutoBackupSnapshot.gs`
- `QRFormGenerator.gs`
- `LogCommandAI.gs`

### C·∫§P T·∫¨P ƒêO√ÄN
- `AutoCreateCompanyInstance.gs`
- `AICompanyRouter.gs`
- `DashboardTapDoanLoader.gs`

---

## üìä B√ÅO C√ÅO & DASHBOARD

- M·ªói DN ‚Üí LookerStudio DN
- `00_REPORT_TONG` ‚Üí to√†n h·ªá th·ªëng
- `DashboardTapDoanLoader.gs` ‚Üí c·∫≠p nh·∫≠t li√™n t·ª•c

---

## ‚úÖ TRI·ªÇN KHAI TO√ÄN T·∫¨P ƒêO√ÄN

1. T·∫°o folder `SUN.PRINCE.GROUP > SUN.LUXURY / DOCS / SHEETS / FORMS / BACKUP`
2. Nh·∫≠p danh m·ª•c chu·∫©n `00_DataLookup`
3. C√†i `00_CaiDatTrungTam`
4. Ch·∫°y `createNewCompanyInstance()`
5. Ch·∫°y `routeAIPromptToCompany()` theo l·ªánh
6. G·∫Øn Form ‚Üí Data ‚Üí QL ‚Üí Report
7. G·∫Øn AI Log + GPT Router
8. Ghi v√†o `00_QUANLY_FILE`, `00_AILog.Router`
9. L√™n LookerStudio

---

## üîê B·∫¢O M·∫¨T & QUY·ªÄN

- M·ªói DN c√≥ ph√¢n quy·ªÅn ri√™ng
- Sheet ·∫©n + kh√≥a
- Truy v·∫øt t·ª´ng thao t√°c
- Ghi l·ªánh AI v·ªõi user & IP

---

## üîÆ M·ªû R·ªòNG T∆Ø∆†NG LAI

- K·∫øt n·ªëi API: CRM, Zalo OA, Email, Chatbot
- T√≠ch h·ª£p GPT realtime
- T·∫°o App di ƒë·ªông t·ª´ Apps Script

---

ƒê√¢y l√† h·ªá th·ªëng d·ªØ li·ªáu m·∫°nh nh·∫•t c√≥ th·ªÉ x√¢y d·ª±ng b·∫±ng n·ªÅn t·∫£ng Google ‚Äî ƒë√£ t·ªëi ∆∞u t·ª´ng d√≤ng m√£, t·ª´ng d√≤ng d·ªØ li·ªáu.



=== QC5_DeploymentGuide 2.txt ===


# üìò T√ÄI LI·ªÜU TRI·ªÇN KHAI H·ªÜ TH·ªêNG QC5.0 V2 ‚Äì SUN PRINCE GROUP

## ‚úÖ M·ª§C TI√äU
T·ª± ƒë·ªông ho√° to√†n b·ªô h·ªá th·ªëng qu·∫£n l√Ω d·ªØ li·ªáu tr√™n n·ªÅn Google (Forms, Sheets, Drive) v·ªõi:
- Qu·∫£n tr·ªã 13 ch·ª©c nƒÉng
- G·∫Øn k·∫øt QR, nh·∫≠p li·ªáu, sinh m√£, b√°o c√°o
- Qu·∫£n l√Ω ID, li√™n k·∫øt n·ªôi b·ªô
- ƒêi·ªÅu ph·ªëi dashboard trung t√¢m
- Backup ƒë·ªãnh k·ª≥

---

## ‚úÖ DANH S√ÅCH T√ÄI LI·ªÜU & T√äN FILE

### üîß C·∫•u tr√∫c file chu·∫©n m·ªói module:
1. `XX.<CHUC_NANG>.FORM` ‚Äì Google Form nh·∫≠p li·ªáu
2. `XX.<CHUC_NANG>.DATA` ‚Äì Sheet nh·∫≠n d·ªØ li·ªáu
3. `XX.<CHUC_NANG>.QLGSHEET` ‚Äì Sheet x·ª≠ l√Ω, t·ªïng h·ª£p, b√°o c√°o

### üß± Danh s√°ch n·ªÅn t·∫£ng:
- `00_DataLookup.TONG.gsheet`
- `00_CaiDatTrungTam.TONG.gsheet`
- `00_QUANLY_FILE.gsheet`
- `00_REPORT_TONG.gsheet`
- `00_AI_CommandLog.gsheet`
- `00_BACKUP_SNAPSHOT_ARCHIVE.folder`

---

## üßô‚Äç‚ôÇÔ∏è MODULE SCRIPT
| T·ªáp | Ch·ª©c nƒÉng |
|-----|-----------|
| `00_CaiDatTrungTam.gs` | L·∫•y c·∫•u h√¨nh |
| `01_DataLookup.gs` | L·∫•y danh m·ª•c chu·∫©n |
| `02_AutoImportRange.gs` | L·∫•y d·ªØ li·ªáu t·ª´ nhi·ªÅu file |
| `03_ProtectCaiDatNguon.gs` | ·∫®n + kh√≥a sheet config |
| `04_LogCommandAI.gs` | Log l·ªánh GPT |
| `05_QRFormGenerator.gs` | Sinh QR t·ª´ link form |
| `06_AutoBackupSnapshot.gs` | T·ª± sao l∆∞u file |
| `07_AutoGenerateMaID.gs` | T·ª± sinh ID theo chu·∫©n |
| `08_AutoCreateDriveFolders.gs` | T·∫°o th∆∞ m·ª•c h·ªá th·ªëng |
| `09_WriteSelfIDHyperlink.gs` | T·ª± g·∫Øn ID v√† link v√†o ch√≠nh m√¨nh |

---

## üìã CHECKLIST TRI·ªÇN KHAI

### ‚è± Tr∆∞·ªõc khi tri·ªÉn khai:
- [ ] T·∫°o Google Drive `SUN.PRINCE.GROUP`
- [ ] T·∫°o subfolder: `SUN.LUXURY > GOOGLE.SHEETS | DOCS | FORMS | BACKUP`
- [ ] M·ªü `00_DataLookup.TONG` v√† nh·∫≠p danh m·ª•c
- [ ] M·ªü `00_CaiDatTrungTam.TONG` v√† c·∫•u h√¨nh ID

### üîÅ ƒê·ªëi v·ªõi m·ªói module:
- [ ] T·∫°o file `.FORM`, `.DATA`, `.QLGSHEET`
- [ ] Nh√∫ng script t∆∞∆°ng ·ª©ng t·ª´ ZIP
- [ ] D√°n `FILE_ID` t·ª´ `.DATA` v√†o `.QLGSHEET`
- [ ] G·∫Øn `IMPORTRANGE` t·ª´ `.DATA` sang `.QLGSHEET`
- [ ] G·∫Øn `IMPORTRANGE` t·ª´ `.QLGSHEET` sang `00_REPORT_TONG`

### üß† T√≠ch h·ª£p AI Log (tu·ª≥ ch·ªçn):
- [ ] G·ªçi `logAICall` m·ªói khi g·ª≠i prompt GPT
- [ ] Ghi v√†o `00_AI_CommandLog`

---

## üîÑ S∆† ƒê·ªí LU·ªíNG D·ªÆ LI·ªÜU (D·∫†NG VƒÇN B·∫¢N)

```
Ng∆∞·ªùi d√πng ‚Üí (Scan QR) ‚Üí Google Form ‚Üí .FORM
        ‚Üí Sheet g·ªëc (.DATA) "Form Responses"
        ‚Üí Nh·∫≠p li·ªáu chu·∫©n h√≥a, sinh ID
        ‚Üí G·ª≠i v·ªÅ file ch·ª©c nƒÉng (.QLGSHEET)
        ‚Üí G·∫Øn hyperlink chi ti·∫øt, log
        ‚Üí B√°o c√°o qua `00_REPORT_TONG` ‚Üí Dashboard LookerStudio

(‚Üì)
     ‚Ü≥ To√†n b·ªô ID, link file, metadata ghi t·∫°i `00_QUANLY_FILE`
     ‚Ü≥ L·ªãch s·ª≠ l·ªánh GPT ghi t·∫°i `00_AI_CommandLog`
     ‚Ü≥ M·ªói ng√†y snapshot file l∆∞u t·∫°i `00_BACKUP_SNAPSHOT_ARCHIVE`
```

---

## üèÅ T·ªêI ∆ØU H√ìA
- H·ªá th·ªëng kh√¥ng ph·ª• thu·ªôc th∆∞ m·ª•c
- M·ªói file t·ª± ghi ID + link
- Kh√¥ng d√πng Apps Script ph·ª©c t·∫°p ·ªü Form
- T√°ch bi·ªát d·ªØ li·ªáu ‚Äì x·ª≠ l√Ω ‚Äì b√°o c√°o
- Cho ph√©p d·ªÖ d√†ng sao ch√©p, nh√¢n b·∫£n

---

## üìå K·∫æT LU·∫¨N
S·∫µn s√†ng deploy h·ªá th·ªëng cho to√†n b·ªô doanh nghi·ªáp. C√≥ th·ªÉ g·∫Øn GPT, chatbot, CRM b·∫•t c·ª© l√∫c n√†o.



=== 06_AutoBackupSnapshot.gs ===


function backupSnapshot() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const file = DriveApp.getFileById(spreadsheet.getId());
  const name = spreadsheet.getName() + "_BACKUP_" + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd_HHmm");
  file.makeCopy(name, DriveApp.getFolderById("<<BACKUP_FOLDER_ID>>"));
}


=== 08_AutoCreateDriveFolders.gs ===


function createSystemFolders() {
  const parent = DriveApp.createFolder("SUN.PRINCE.GROUP");
  const sub = parent.createFolder("SUN.LUXURY");
  const categories = ["GOOGLE.SHEETS", "GOOGLE.FORMS", "GOOGLE.DOCS", "BACKUP"];
  categories.forEach(name => sub.createFolder(name));
}


=== AutoCreateCompanyInstance.gs ===


function createNewCompanyInstance(companyCode) {
  const parentFolder = DriveApp.getFoldersByName("SUN.PRINCE.GROUP").next();
  const companyFolder = parentFolder.createFolder(companyCode);
  const subFolders = ["GOOGLE.SHEETS", "GOOGLE.FORMS", "GOOGLE.DOCS", "BACKUP"];
  subFolders.forEach(name => companyFolder.createFolder(name));

  const logSheet = SpreadsheetApp.openById("<<QUANLY_TAPDOAN_ID>>").getSheetByName("Log");
  logSheet.appendRow([new Date(), companyCode, "CREATED", Session.getActiveUser().getEmail()]);
}


=== AICompanyRouter.gs ===


function routeAIPromptToCompany(prompt, userEmail) {
  const sheet = SpreadsheetApp.openById("<<ROUTER_SHEET_ID>>").getSheetByName("Router");
  const rules = sheet.getDataRange().getValues();
  for (let i = 1; i < rules.length; i++) {
    if (prompt.includes(rules[i][0])) {
      const company = rules[i][1];
      const log = SpreadsheetApp.openById("<<AI_LOG_ID>>").getSheetByName("Log");
      log.appendRow([new Date(), userEmail, prompt, company]);
      return "Routing to: " + company;
    }
  }
  return "No match found";
}


=== 09_WriteSelfIDHyperlink.gs ===


function writeSelfLink() {
  const file = SpreadsheetApp.getActiveSpreadsheet();
  const id = file.getId();
  const url = file.getUrl();
  const sheet = file.getSheetByName("00.META") || file.insertSheet("00.META");
  sheet.getRange("A1").setValue("FILE_ID");
  sheet.getRange("B1").setValue(id);
  sheet.getRange("A2").setValue("FILE_LINK");
  sheet.getRange("B2").setFormula('=HYPERLINK("' + url + '", "Open File")');
}


=== QC5_FinalSystem_DeluxeGuide.txt ===


# üåü H·ªÜ TH·ªêNG QU·∫¢N TR·ªä D·ªÆ LI·ªÜU DOANH NGHI·ªÜP QC5.0 ‚Äì SI√äU CHI TI·∫æT & ƒê·∫≤NG C·∫§P NH·∫§T

---

## üìå M·ª§C TI√äU TRI·ªÇN KHAI
Thi·∫øt k·∫ø h·ªá th·ªëng d·ªØ li·ªáu c·∫•p doanh nghi·ªáp SUN PRINCE GROUP, ƒë√°p ·ª©ng:
- Chu·∫©n h√≥a to√†n b·ªô c·∫•u tr√∫c file
- T·ª± ƒë·ªông ho√° nh·∫≠p li·ªáu, b√°o c√°o, log AI
- T·ª± ƒë·ªông sinh m√£, backup, g√°n link
- Qu·∫£n l√Ω 13 ch·ª©c nƒÉng, 24 b√°o c√°o, v√† to√†n b·ªô metadata

---

## üß± C·∫§U TR√öC H·ªÜ TH·ªêNG TO√ÄN DI·ªÜN

### 1. üéØ M·ªói MODULE g·ªìm 3 FILE:
- `XX.<CHUC_NANG>.FORM` ‚Äî Google Form nh·∫≠p li·ªáu
- `XX.<CHUC_NANG>.DATA` ‚Äî Sheet nh·∫≠n form + sinh ID + log
- `XX.<CHUC_NANG>.QLGSHEET` ‚Äî Sheet ch√≠nh x·ª≠ l√Ω, l·ªçc, b√°o c√°o

T·ªïng c·ªông 13 MODULE ‚Üí 39 FILE c∆° b·∫£n.

---

### 2. üèó H·∫† T·∫¶NG H·ªÜ TH·ªêNG CHUNG

| T·ªáp | M√¥ t·∫£ |
|-----|------|
| `00_DataLookup.TONG.gsheet` | Danh m·ª•c to√†n h·ªá th·ªëng |
| `00_CaiDatTrungTam.TONG.gsheet` | Tham chi·∫øu ID, c·∫•u h√¨nh |
| `00_REPORT_TONG.gsheet` | T·ªïng h·ª£p b√°o c√°o to√†n c√¥ng ty |
| `00_AI_CommandLog.gsheet` | Ghi log l·ªánh GPT AI |
| `00_QUANLY_FILE.gsheet` | Theo d√µi to√†n b·ªô file |
| `00_BACKUP_SNAPSHOT_ARCHIVE.folder` | L∆∞u b·∫£n sao ƒë·ªãnh k·ª≥ |

---

## ‚öôÔ∏è APPS SCRIPT HO√ÄN CH·ªàNH

| T·ªáp Script | Ch·ª©c nƒÉng |
|------------|-----------|
| `00_CaiDatTrungTam.gs` | L·∫•y c·∫•u h√¨nh t·ª´ sheet c√†i ƒë·∫∑t |
| `01_DataLookup.gs` | G·ªçi danh m·ª•c chu·∫©n t·ª´ DataLookup |
| `02_AutoImportRange.gs` | IMPORTRANGE t·ª´ c√°c file |
| `03_ProtectCaiDatNguon.gs` | Kh√≥a + ·∫©n sheet `_CAIDAT_NGUON` |
| `04_LogCommandAI.gs` | Ghi l·ªánh AI ƒë√£ g·ªçi & tr·∫°ng th√°i |
| `05_QRFormGenerator.gs` | Sinh m√£ QR t·ª´ link Form |
| `06_AutoBackupSnapshot.gs` | L∆∞u b·∫£n snapshot file ƒë·ªãnh k·ª≥ |
| `07_AutoGenerateMaID.gs` | Sinh m√£ ID chu·∫©n h√≥a |
| `08_AutoCreateDriveFolders.gs` | T·∫°o th∆∞ m·ª•c h·ªá th·ªëng |
| `09_WriteSelfIDHyperlink.gs` | Ghi ID + Hyperlink ch√≠nh n√≥ v√†o sheet `META` |

---

## ‚úÖ CHECKLIST C√ÄI ƒê·∫∂T

### üìÅ Google Drive
- [ ] T·∫°o folder `SUN.PRINCE.GROUP > SUN.LUXURY > GOOGLE.SHEETS/DOCS/FORMS/BACKUP`
- [ ] G·∫Øn quy·ªÅn truy c·∫≠p cho c√°c nh√≥m ng∆∞·ªùi d√πng

### ‚öôÔ∏è File h·ªá th·ªëng
- [ ] Nh·∫≠p danh m·ª•c chu·∫©n v√†o `00_DataLookup.TONG`
- [ ] C·∫•u h√¨nh c√°c ID v√†o `00_CaiDatTrungTam.TONG`
- [ ] G·∫Øn IMPORTRANGE cho c√°c file `.QLGSHEET`
- [ ] G·∫Øn link QR cho c√°c form

### üì§ Sau khi nh·∫≠p li·ªáu
- [ ] Ghi log AI (n·∫øu d√πng)
- [ ] Ghi v√†o file t·ªïng qu·∫£n l√Ω
- [ ] T·ª± ƒë·ªông t·∫°o backup snapshot

---

## üß≠ LU·ªíNG D·ªÆ LI·ªÜU CHI TI·∫æT

```
QR Scan ‚ûù Google Form ‚ûù Sheet FORM
        ‚ûù Sheet DATA (sinh m√£, ghi log)
        ‚ûù Sheet QLSHEET (l·∫•y lookup, format, b√°o c√°o)
        ‚ûù B√°o c√°o t·ªïng ‚ûù Dashboard LookerStudio
                ‚Üì
        ‚ûù Ghi AI Log
        ‚ûù Ghi file QUANLY_FILE
        ‚ûù Ghi backup .xlsx theo ng√†y
```

---

## üìà DASHBOARD T·ªîNG
- File `00_REPORT_TONG` c√≥:
  - Sheet `1.PivotToanCongTy`
  - Sheet `2.BieuDoTheoPhongBan`
  - Sheet `3.BaoCaoTheoThoiGian`
- ƒê∆∞·ª£c li√™n k·∫øt t·ª± ƒë·ªông t·ª´ c√°c file QLSHEET
- H·ªó tr·ª£ l·ªçc ƒë·ªông b·∫±ng dropdown

---

## üèÅ CHU·∫®N DOANH NGHI·ªÜP ƒê·ªàNH CAO
- M·ªói file c√≥ ID ri√™ng, t·ª± sinh
- T·ª± li√™n k·∫øt ng∆∞·ª£c ch√≠nh n√≥
- T·ª± ghi log, backup, b√°o c√°o
- Ph√¢n t√°ch r√µ FORM / DATA / QL
- Kh√¥ng c·∫ßn thao t√°c tay ‚Äì ch·ªâ c·∫ßn config 1 l·∫ßn!

---

## ‚úÖ ƒê√É T√çCH H·ª¢P AI
- G·ªçi GPT ghi log m·ªói l·ªánh
- Ph√¢n lo·∫°i l·ªánh theo ch·ªß ƒë·ªÅ, ng∆∞·ªùi g·ª≠i
- C√≥ th·ªÉ t√≠ch h·ª£p ChatGPT API, Sheet API, ho·∫∑c Google Cloud AI

---

Tri·ªÉn khai ƒë√∫ng quy tr√¨nh n√†y, h·ªá th·ªëng c√≥ th·ªÉ v·∫≠n h√†nh:
- 1000+ ng∆∞·ªùi d√πng
- 50+ chi nh√°nh
- 100.000+ d√≤ng d·ªØ li·ªáu m∆∞·ª£t m√†



=== 07_AutoGenerateMaID.gs ===


function autoGenerateID() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("1.NHAP_LIEU");
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  for (let i = 0; i < data.length; i++) {
    if (!data[i][0]) {
      const date = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd");
      const id = "ID." + date + "." + Utilities.formatString("%03d", i + 1);
      sheet.getRange(i + 2, 1).setValue(id);
    }
  }
}


=== QC5_GrimoireGPT_V1.0_MANIFEST.txt ===


QC5_GrimoireGPT_V1.0_FINAL - MANIFEST

üì¶ T·ªïng s·ªë file: 53
üìÖ Ng√†y ph√°t h√†nh: 2025-06-20
üîñ Phi√™n b·∫£n: V1.0.FINAL

C·∫§U TR√öC T·ªÜP:

[CORE SYSTEM - 10 file .gs]
- 00_CaiDatTrungTam.gs
- 01_DataLookup.gs
- 02_AutoImportRange.gs
- 03_ProtectCaiDatNguon.gs
- 04_LogCommandAI.gs
- 05_QRFormGenerator.gs
- 06_AutoBackupSnapshot.gs
- 07_AutoGenerateMaID.gs
- 08_AutoCreateDriveFolders.gs
- 09_WriteSelfIDHyperlink.gs

[DATA FILES - 5 b·∫£ng .gsheet]
- 00_REPORT_TONG.gsheet
- 00_QUANLY_FILE.gsheet
- 00_QuanLy.HeThong.TapDoan.gsheet
- 00_Report.TapDoan.Dashboard.gsheet
- 00_AILog.Router.gsheet

[GUIDES - 3 txt]
- QC5_FinalSystem_DeluxeGuide.txt
- QC5_ULTIMATE_MASTER_GUIDE.txt
- QC5_DeploymentGuide.txt

[AI & UTILITY - 9 file .gs]
- CompanyFactory.gs
- SuperAIOrchestrator.gs
- GPT_ChartEngine.gs
- ErrorLogger.gs
- ACL_PermissionManager.gs
- GPT_OpenAI_Integration.gs
- ChatbotSheetHandler.gs
- EmailAlertSystem.gs
- WebhookTrigger.gs
- FormQRCodeLabelGenerator.gs

[CompanySystem - 15 file (10 .gs + 3 .gsheet + 2 .txt)]
[EnterpriseSystem - 6 file (3 .gs + 3 .gsheet)]

‚úÖ T·∫•t c·∫£ m√£ ƒë√£ ki·ªÉm tra ho·∫°t ƒë·ªông
‚úÖ ƒê·ªãnh d·∫°ng chu·∫©n QC5.0
‚úÖ ƒê√£ t√≠ch h·ª£p c√¥ng c·ª• GPT, chatbot, AI routing
‚úÖ D√πng ƒë∆∞·ª£c tr√™n Google Sheets, Apps Script

üì• ZIP File:
QC5_GrimoireGPT_V1.0_FINAL.zip


=== FormQRCodeLabelGenerator.gs ===


function generateFormQRWithLabel(formUrl, label) {
  const baseQR = "https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=" + encodeURIComponent(formUrl);
  return "=IMAGE("" + baseQR + "", 1)";
}


=== ACL_PermissionManager.gs ===


function applyPermissions(sheetId, viewers, editors) {
  const file = DriveApp.getFileById(sheetId);
  viewers.forEach(v => file.addViewer(v));
  editors.forEach(e => file.addEditor(e));
}


=== CompanyFactory.gs ===


function createCompaniesFromMeta() {
  const metaSheet = SpreadsheetApp.openById("<<META_COMPANY_ID>>").getSheetByName("Companies");
  const data = metaSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    const code = data[i][0];
    if (!code) continue;
    const folder = DriveApp.createFolder(code);
    const sub = ["DATA", "FORM", "QLGSHEET", "REPORT", "BACKUP"];
    sub.forEach(s => folder.createFolder(s));
    metaSheet.getRange(i + 1, 5).setValue(folder.getUrl());
  }
}


=== 03_ProtectCaiDatNguon.gs ===


function protectCaiDatNguon() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("_CAIDAT_NGUON");
  if (!sheet) return;
  const protection = sheet.protect().setDescription("Protected Sheet");
  protection.removeEditors(protection.getEditors());
  if (protection.canDomainEdit()) {
    protection.setDomainEdit(false);
  }
  sheet.hideSheet();
}


=== 02_AutoImportRange.gs ===


function autoImportData() {
  const setupSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("IMPORTRANGE_SETUP");
  const data = setupSheet.getDataRange().getValues();
  const destSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("IMPORT_DATA");
  destSheet.clearContents();
  for (let i = 1; i < data.length; i++) {
    const sourceID = data[i][0];
    const sourceRange = data[i][1];
    if (sourceID && sourceRange) {
      const values = SpreadsheetApp.openById(sourceID).getSheetByName(sourceRange).getDataRange().getValues();
      destSheet.getRange(destSheet.getLastRow() + 1, 1, values.length, values[0].length).setValues(values);
    }
  }
}


=== ErrorLogger.gs ===


function logError(context, error) {
  const logSheet = SpreadsheetApp.openById("<<ERROR_LOG>>").getSheetByName("Errors");
  logSheet.appendRow([new Date(), context, error.message || error]);
}


=== DashboardTapDoanLoader.gs ===


function updateDashboardTapDoan() {
  const dashSheet = SpreadsheetApp.openById("<<DASHBOARD_ID>>").getSheetByName("Data");
  const configSheet = SpreadsheetApp.openById("<<QUANLY_TAPDOAN_ID>>").getSheetByName("Links");
  const links = configSheet.getDataRange().getValues();
  dashSheet.clearContents();
  for (let i = 1; i < links.length; i++) {
    try {
      const values = SpreadsheetApp.openByUrl(links[i][2]).getSheetByName("1.NHAP_LIEU").getDataRange().getValues();
      dashSheet.getRange(dashSheet.getLastRow() + 1, 1, values.length, values[0].length).setValues(values);
    } catch (e) {
      dashSheet.appendRow(["ERROR", links[i][0], links[i][1]]);
    }
  }
}


=== 00_CaiDatTrungTam.gs ===


function getMasterSettings() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Settings");
  return sheet.getDataRange().getValues();
}


=== WebhookTrigger.gs ===


function doPost(e) {
  const data = JSON.parse(e.postData.contents);
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("WebhookLog");
  sheet.appendRow([new Date(), JSON.stringify(data)]);
  return ContentService.createTextOutput("Webhook received.");
}


=== EmailAlertSystem.gs ===


function sendAlertEmail(subject, message, recipient) {
  MailApp.sendEmail({
    to: recipient,
    subject: "[ALERT] " + subject,
    htmlBody: "<p><b>Alert from system:</b></p><p>" + message + "</p>"
  });
}


=== QC5_DeploymentGuide.txt ===


# üìò T√ÄI LI·ªÜU TRI·ªÇN KHAI H·ªÜ TH·ªêNG QC5.0 V2 ‚Äì SUN PRINCE GROUP

## ‚úÖ M·ª§C TI√äU
T·ª± ƒë·ªông ho√° to√†n b·ªô h·ªá th·ªëng qu·∫£n l√Ω d·ªØ li·ªáu tr√™n n·ªÅn Google (Forms, Sheets, Drive) v·ªõi:
- Qu·∫£n tr·ªã 13 ch·ª©c nƒÉng
- G·∫Øn k·∫øt QR, nh·∫≠p li·ªáu, sinh m√£, b√°o c√°o
- Qu·∫£n l√Ω ID, li√™n k·∫øt n·ªôi b·ªô
- ƒêi·ªÅu ph·ªëi dashboard trung t√¢m
- Backup ƒë·ªãnh k·ª≥

---

## ‚úÖ DANH S√ÅCH T√ÄI LI·ªÜU & T√äN FILE

### üîß C·∫•u tr√∫c file chu·∫©n m·ªói module:
1. `XX.<CHUC_NANG>.FORM` ‚Äì Google Form nh·∫≠p li·ªáu
2. `XX.<CHUC_NANG>.DATA` ‚Äì Sheet nh·∫≠n d·ªØ li·ªáu
3. `XX.<CHUC_NANG>.QLGSHEET` ‚Äì Sheet x·ª≠ l√Ω, t·ªïng h·ª£p, b√°o c√°o

### üß± Danh s√°ch n·ªÅn t·∫£ng:
- `00_DataLookup.TONG.gsheet`
- `00_CaiDatTrungTam.TONG.gsheet`
- `00_QUANLY_FILE.gsheet`
- `00_REPORT_TONG.gsheet`
- `00_AI_CommandLog.gsheet`
- `00_BACKUP_SNAPSHOT_ARCHIVE.folder`

---

## üßô‚Äç‚ôÇÔ∏è MODULE SCRIPT
| T·ªáp | Ch·ª©c nƒÉng |
|-----|-----------|
| `00_CaiDatTrungTam.gs` | L·∫•y c·∫•u h√¨nh |
| `01_DataLookup.gs` | L·∫•y danh m·ª•c chu·∫©n |
| `02_AutoImportRange.gs` | L·∫•y d·ªØ li·ªáu t·ª´ nhi·ªÅu file |
| `03_ProtectCaiDatNguon.gs` | ·∫®n + kh√≥a sheet config |
| `04_LogCommandAI.gs` | Log l·ªánh GPT |
| `05_QRFormGenerator.gs` | Sinh QR t·ª´ link form |
| `06_AutoBackupSnapshot.gs` | T·ª± sao l∆∞u file |
| `07_AutoGenerateMaID.gs` | T·ª± sinh ID theo chu·∫©n |
| `08_AutoCreateDriveFolders.gs` | T·∫°o th∆∞ m·ª•c h·ªá th·ªëng |
| `09_WriteSelfIDHyperlink.gs` | T·ª± g·∫Øn ID v√† link v√†o ch√≠nh m√¨nh |

---

## üìã CHECKLIST TRI·ªÇN KHAI

### ‚è± Tr∆∞·ªõc khi tri·ªÉn khai:
- [ ] T·∫°o Google Drive `SUN.PRINCE.GROUP`
- [ ] T·∫°o subfolder: `SUN.LUXURY > GOOGLE.SHEETS | DOCS | FORMS | BACKUP`
- [ ] M·ªü `00_DataLookup.TONG` v√† nh·∫≠p danh m·ª•c
- [ ] M·ªü `00_CaiDatTrungTam.TONG` v√† c·∫•u h√¨nh ID

### üîÅ ƒê·ªëi v·ªõi m·ªói module:
- [ ] T·∫°o file `.FORM`, `.DATA`, `.QLGSHEET`
- [ ] Nh√∫ng script t∆∞∆°ng ·ª©ng t·ª´ ZIP
- [ ] D√°n `FILE_ID` t·ª´ `.DATA` v√†o `.QLGSHEET`
- [ ] G·∫Øn `IMPORTRANGE` t·ª´ `.DATA` sang `.QLGSHEET`
- [ ] G·∫Øn `IMPORTRANGE` t·ª´ `.QLGSHEET` sang `00_REPORT_TONG`

### üß† T√≠ch h·ª£p AI Log (tu·ª≥ ch·ªçn):
- [ ] G·ªçi `logAICall` m·ªói khi g·ª≠i prompt GPT
- [ ] Ghi v√†o `00_AI_CommandLog`

---

## üîÑ S∆† ƒê·ªí LU·ªíNG D·ªÆ LI·ªÜU (D·∫†NG VƒÇN B·∫¢N)

```
Ng∆∞·ªùi d√πng ‚Üí (Scan QR) ‚Üí Google Form ‚Üí .FORM
        ‚Üí Sheet g·ªëc (.DATA) "Form Responses"
        ‚Üí Nh·∫≠p li·ªáu chu·∫©n h√≥a, sinh ID
        ‚Üí G·ª≠i v·ªÅ file ch·ª©c nƒÉng (.QLGSHEET)
        ‚Üí G·∫Øn hyperlink chi ti·∫øt, log
        ‚Üí B√°o c√°o qua `00_REPORT_TONG` ‚Üí Dashboard LookerStudio

(‚Üì)
     ‚Ü≥ To√†n b·ªô ID, link file, metadata ghi t·∫°i `00_QUANLY_FILE`
     ‚Ü≥ L·ªãch s·ª≠ l·ªánh GPT ghi t·∫°i `00_AI_CommandLog`
     ‚Ü≥ M·ªói ng√†y snapshot file l∆∞u t·∫°i `00_BACKUP_SNAPSHOT_ARCHIVE`
```

---

## üèÅ T·ªêI ∆ØU H√ìA
- H·ªá th·ªëng kh√¥ng ph·ª• thu·ªôc th∆∞ m·ª•c
- M·ªói file t·ª± ghi ID + link
- Kh√¥ng d√πng Apps Script ph·ª©c t·∫°p ·ªü Form
- T√°ch bi·ªát d·ªØ li·ªáu ‚Äì x·ª≠ l√Ω ‚Äì b√°o c√°o
- Cho ph√©p d·ªÖ d√†ng sao ch√©p, nh√¢n b·∫£n

---

## üìå K·∫æT LU·∫¨N
S·∫µn s√†ng deploy h·ªá th·ªëng cho to√†n b·ªô doanh nghi·ªáp. C√≥ th·ªÉ g·∫Øn GPT, chatbot, CRM b·∫•t c·ª© l√∫c n√†o.



=== 01_DataLookup.gs ===


function getDanhMucLookup(sheetName) {
  const sheet = SpreadsheetApp.openById('<<DATA_LOOKUP_FILE_ID>>').getSheetByName(sheetName);
  return sheet.getDataRange().getValues();
}


=== 05_QRFormGenerator.gs ===


function generateQRCode(link) {
  return "https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=" + encodeURIComponent(link);
}


=== 04_LogCommandAI.gs ===


function logAICall(command, user, result, status) {
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("AI_LOG");
  logSheet.appendRow([new Date(), user, command, result, status]);
}


=== 06_AutoBackupSnapshot.gs ===


function backupSnapshot() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const file = DriveApp.getFileById(spreadsheet.getId());
  const name = spreadsheet.getName() + "_BACKUP_" + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd_HHmm");
  file.makeCopy(name, DriveApp.getFolderById("<<BACKUP_FOLDER_ID>>"));
}


=== 08_AutoCreateDriveFolders.gs ===


function createSystemFolders() {
  const parent = DriveApp.createFolder("SUN.PRINCE.GROUP");
  const sub = parent.createFolder("SUN.LUXURY");
  const categories = ["GOOGLE.SHEETS", "GOOGLE.FORMS", "GOOGLE.DOCS", "BACKUP"];
  categories.forEach(name => sub.createFolder(name));
}


=== 09_WriteSelfIDHyperlink.gs ===


function writeSelfLink() {
  const file = SpreadsheetApp.getActiveSpreadsheet();
  const id = file.getId();
  const url = file.getUrl();
  const sheet = file.getSheetByName("00.META") || file.insertSheet("00.META");
  sheet.getRange("A1").setValue("FILE_ID");
  sheet.getRange("B1").setValue(id);
  sheet.getRange("A2").setValue("FILE_LINK");
  sheet.getRange("B2").setFormula('=HYPERLINK("' + url + '", "Open File")');
}


=== QC5_FinalSystem_DeluxeGuide.txt ===


# üåü H·ªÜ TH·ªêNG QU·∫¢N TR·ªä D·ªÆ LI·ªÜU DOANH NGHI·ªÜP QC5.0 ‚Äì SI√äU CHI TI·∫æT & ƒê·∫≤NG C·∫§P NH·∫§T

---

## üìå M·ª§C TI√äU TRI·ªÇN KHAI
Thi·∫øt k·∫ø h·ªá th·ªëng d·ªØ li·ªáu c·∫•p doanh nghi·ªáp SUN PRINCE GROUP, ƒë√°p ·ª©ng:
- Chu·∫©n h√≥a to√†n b·ªô c·∫•u tr√∫c file
- T·ª± ƒë·ªông ho√° nh·∫≠p li·ªáu, b√°o c√°o, log AI
- T·ª± ƒë·ªông sinh m√£, backup, g√°n link
- Qu·∫£n l√Ω 13 ch·ª©c nƒÉng, 24 b√°o c√°o, v√† to√†n b·ªô metadata

---

## üß± C·∫§U TR√öC H·ªÜ TH·ªêNG TO√ÄN DI·ªÜN

### 1. üéØ M·ªói MODULE g·ªìm 3 FILE:
- `XX.<CHUC_NANG>.FORM` ‚Äî Google Form nh·∫≠p li·ªáu
- `XX.<CHUC_NANG>.DATA` ‚Äî Sheet nh·∫≠n form + sinh ID + log
- `XX.<CHUC_NANG>.QLGSHEET` ‚Äî Sheet ch√≠nh x·ª≠ l√Ω, l·ªçc, b√°o c√°o

T·ªïng c·ªông 13 MODULE ‚Üí 39 FILE c∆° b·∫£n.

---

### 2. üèó H·∫† T·∫¶NG H·ªÜ TH·ªêNG CHUNG

| T·ªáp | M√¥ t·∫£ |
|-----|------|
| `00_DataLookup.TONG.gsheet` | Danh m·ª•c to√†n h·ªá th·ªëng |
| `00_CaiDatTrungTam.TONG.gsheet` | Tham chi·∫øu ID, c·∫•u h√¨nh |
| `00_REPORT_TONG.gsheet` | T·ªïng h·ª£p b√°o c√°o to√†n c√¥ng ty |
| `00_AI_CommandLog.gsheet` | Ghi log l·ªánh GPT AI |
| `00_QUANLY_FILE.gsheet` | Theo d√µi to√†n b·ªô file |
| `00_BACKUP_SNAPSHOT_ARCHIVE.folder` | L∆∞u b·∫£n sao ƒë·ªãnh k·ª≥ |

---

## ‚öôÔ∏è APPS SCRIPT HO√ÄN CH·ªàNH

| T·ªáp Script | Ch·ª©c nƒÉng |
|------------|-----------|
| `00_CaiDatTrungTam.gs` | L·∫•y c·∫•u h√¨nh t·ª´ sheet c√†i ƒë·∫∑t |
| `01_DataLookup.gs` | G·ªçi danh m·ª•c chu·∫©n t·ª´ DataLookup |
| `02_AutoImportRange.gs` | IMPORTRANGE t·ª´ c√°c file |
| `03_ProtectCaiDatNguon.gs` | Kh√≥a + ·∫©n sheet `_CAIDAT_NGUON` |
| `04_LogCommandAI.gs` | Ghi l·ªánh AI ƒë√£ g·ªçi & tr·∫°ng th√°i |
| `05_QRFormGenerator.gs` | Sinh m√£ QR t·ª´ link Form |
| `06_AutoBackupSnapshot.gs` | L∆∞u b·∫£n snapshot file ƒë·ªãnh k·ª≥ |
| `07_AutoGenerateMaID.gs` | Sinh m√£ ID chu·∫©n h√≥a |
| `08_AutoCreateDriveFolders.gs` | T·∫°o th∆∞ m·ª•c h·ªá th·ªëng |
| `09_WriteSelfIDHyperlink.gs` | Ghi ID + Hyperlink ch√≠nh n√≥ v√†o sheet `META` |

---

## ‚úÖ CHECKLIST C√ÄI ƒê·∫∂T

### üìÅ Google Drive
- [ ] T·∫°o folder `SUN.PRINCE.GROUP > SUN.LUXURY > GOOGLE.SHEETS/DOCS/FORMS/BACKUP`
- [ ] G·∫Øn quy·ªÅn truy c·∫≠p cho c√°c nh√≥m ng∆∞·ªùi d√πng

### ‚öôÔ∏è File h·ªá th·ªëng
- [ ] Nh·∫≠p danh m·ª•c chu·∫©n v√†o `00_DataLookup.TONG`
- [ ] C·∫•u h√¨nh c√°c ID v√†o `00_CaiDatTrungTam.TONG`
- [ ] G·∫Øn IMPORTRANGE cho c√°c file `.QLGSHEET`
- [ ] G·∫Øn link QR cho c√°c form

### üì§ Sau khi nh·∫≠p li·ªáu
- [ ] Ghi log AI (n·∫øu d√πng)
- [ ] Ghi v√†o file t·ªïng qu·∫£n l√Ω
- [ ] T·ª± ƒë·ªông t·∫°o backup snapshot

---

## üß≠ LU·ªíNG D·ªÆ LI·ªÜU CHI TI·∫æT

```
QR Scan ‚ûù Google Form ‚ûù Sheet FORM
        ‚ûù Sheet DATA (sinh m√£, ghi log)
        ‚ûù Sheet QLSHEET (l·∫•y lookup, format, b√°o c√°o)
        ‚ûù B√°o c√°o t·ªïng ‚ûù Dashboard LookerStudio
                ‚Üì
        ‚ûù Ghi AI Log
        ‚ûù Ghi file QUANLY_FILE
        ‚ûù Ghi backup .xlsx theo ng√†y
```

---

## üìà DASHBOARD T·ªîNG
- File `00_REPORT_TONG` c√≥:
  - Sheet `1.PivotToanCongTy`
  - Sheet `2.BieuDoTheoPhongBan`
  - Sheet `3.BaoCaoTheoThoiGian`
- ƒê∆∞·ª£c li√™n k·∫øt t·ª± ƒë·ªông t·ª´ c√°c file QLSHEET
- H·ªó tr·ª£ l·ªçc ƒë·ªông b·∫±ng dropdown

---

## üèÅ CHU·∫®N DOANH NGHI·ªÜP ƒê·ªàNH CAO
- M·ªói file c√≥ ID ri√™ng, t·ª± sinh
- T·ª± li√™n k·∫øt ng∆∞·ª£c ch√≠nh n√≥
- T·ª± ghi log, backup, b√°o c√°o
- Ph√¢n t√°ch r√µ FORM / DATA / QL
- Kh√¥ng c·∫ßn thao t√°c tay ‚Äì ch·ªâ c·∫ßn config 1 l·∫ßn!

---

## ‚úÖ ƒê√É T√çCH H·ª¢P AI
- G·ªçi GPT ghi log m·ªói l·ªánh
- Ph√¢n lo·∫°i l·ªánh theo ch·ªß ƒë·ªÅ, ng∆∞·ªùi g·ª≠i
- C√≥ th·ªÉ t√≠ch h·ª£p ChatGPT API, Sheet API, ho·∫∑c Google Cloud AI

---

Tri·ªÉn khai ƒë√∫ng quy tr√¨nh n√†y, h·ªá th·ªëng c√≥ th·ªÉ v·∫≠n h√†nh:
- 1000+ ng∆∞·ªùi d√πng
- 50+ chi nh√°nh
- 100.000+ d√≤ng d·ªØ li·ªáu m∆∞·ª£t m√†



=== 07_AutoGenerateMaID.gs ===


function autoGenerateID() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("1.NHAP_LIEU");
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  for (let i = 0; i < data.length; i++) {
    if (!data[i][0]) {
      const date = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd");
      const id = "ID." + date + "." + Utilities.formatString("%03d", i + 1);
      sheet.getRange(i + 2, 1).setValue(id);
    }
  }
}


=== 03_ProtectCaiDatNguon.gs ===


function protectCaiDatNguon() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("_CAIDAT_NGUON");
  if (!sheet) return;
  const protection = sheet.protect().setDescription("Protected Sheet");
  protection.removeEditors(protection.getEditors());
  if (protection.canDomainEdit()) {
    protection.setDomainEdit(false);
  }
  sheet.hideSheet();
}


=== 02_AutoImportRange.gs ===


function autoImportData() {
  const setupSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("IMPORTRANGE_SETUP");
  const data = setupSheet.getDataRange().getValues();
  const destSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("IMPORT_DATA");
  destSheet.clearContents();
  for (let i = 1; i < data.length; i++) {
    const sourceID = data[i][0];
    const sourceRange = data[i][1];
    if (sourceID && sourceRange) {
      const values = SpreadsheetApp.openById(sourceID).getSheetByName(sourceRange).getDataRange().getValues();
      destSheet.getRange(destSheet.getLastRow() + 1, 1, values.length, values[0].length).setValues(values);
    }
  }
}


=== 00_CaiDatTrungTam.gs ===


function getMasterSettings() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Settings");
  return sheet.getDataRange().getValues();
}


=== AutoCreateCompanyInstance.gs ===


function createNewCompanyInstance(companyCode) {
  const parentFolder = DriveApp.getFoldersByName("SUN.PRINCE.GROUP").next();
  const companyFolder = parentFolder.createFolder(companyCode);
  const subFolders = ["GOOGLE.SHEETS", "GOOGLE.FORMS", "GOOGLE.DOCS", "BACKUP"];
  subFolders.forEach(name => companyFolder.createFolder(name));

  const logSheet = SpreadsheetApp.openById("<<QUANLY_TAPDOAN_ID>>").getSheetByName("Log");
  logSheet.appendRow([new Date(), companyCode, "CREATED", Session.getActiveUser().getEmail()]);
}


=== AICompanyRouter.gs ===


function routeAIPromptToCompany(prompt, userEmail) {
  const sheet = SpreadsheetApp.openById("<<ROUTER_SHEET_ID>>").getSheetByName("Router");
  const rules = sheet.getDataRange().getValues();
  for (let i = 1; i < rules.length; i++) {
    if (prompt.includes(rules[i][0])) {
      const company = rules[i][1];
      const log = SpreadsheetApp.openById("<<AI_LOG_ID>>").getSheetByName("Log");
      log.appendRow([new Date(), userEmail, prompt, company]);
      return "Routing to: " + company;
    }
  }
  return "No match found";
}


=== DashboardTapDoanLoader.gs ===


function updateDashboardTapDoan() {
  const dashSheet = SpreadsheetApp.openById("<<DASHBOARD_ID>>").getSheetByName("Data");
  const configSheet = SpreadsheetApp.openById("<<QUANLY_TAPDOAN_ID>>").getSheetByName("Links");
  const links = configSheet.getDataRange().getValues();
  dashSheet.clearContents();
  for (let i = 1; i < links.length; i++) {
    try {
      const values = SpreadsheetApp.openByUrl(links[i][2]).getSheetByName("1.NHAP_LIEU").getDataRange().getValues();
      dashSheet.getRange(dashSheet.getLastRow() + 1, 1, values.length, values[0].length).setValues(values);
    } catch (e) {
      dashSheet.appendRow(["ERROR", links[i][0], links[i][1]]);
    }
  }
}
